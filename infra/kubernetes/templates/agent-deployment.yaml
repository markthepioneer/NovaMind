apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{DEPLOYMENT_NAME}}
  namespace: {{NAMESPACE}}
  labels:
    app: {{DEPLOYMENT_NAME}}
    agentId: {{AGENT_ID}}
    userId: {{USER_ID}}
    managedBy: novamind
spec:
  replicas: {{REPLICAS}}
  selector:
    matchLabels:
      app: {{DEPLOYMENT_NAME}}
  template:
    metadata:
      labels:
        app: {{DEPLOYMENT_NAME}}
        agentId: {{AGENT_ID}}
        userId: {{USER_ID}}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "9090"
    spec:
      containers:
      - name: agent
        image: {{IMAGE}}
        imagePullPolicy: Always
        ports:
        - containerPort: 4000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: AGENT_ID
          value: "{{AGENT_ID}}"
        - name: DEPLOYMENT_ID
          value: "{{DEPLOYMENT_ID}}"
        - name: NODE_ENV
          value: "{{ENVIRONMENT}}"
        - name: API_BASE_URL
          value: "{{API_BASE_URL}}"
        - name: ENABLE_PROMETHEUS
          value: "true"
        - name: LOG_LEVEL
          value: "info"
        {{ADDITIONAL_ENV_VARS}}
        resources:
          requests:
            cpu: {{CPU_REQUEST}}
            memory: {{MEMORY_REQUEST}}
          limits:
            cpu: {{CPU_LIMIT}}
            memory: {{MEMORY_LIMIT}}
        livenessProbe:
          httpGet:
            path: /health
            port: 4000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 4000
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: logs
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: {{DEPLOYMENT_NAME}}
  namespace: {{NAMESPACE}}
  labels:
    app: {{DEPLOYMENT_NAME}}
    managedBy: novamind
spec:
  selector:
    app: {{DEPLOYMENT_NAME}}
  ports:
  - port: 80
    targetPort: 4000
    name: http
  - port: 9090
    targetPort: 9090
    name: metrics
  type: ClusterIP
---
{{#ENABLE_AUTOSCALING}}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{DEPLOYMENT_NAME}}
  namespace: {{NAMESPACE}}
  labels:
    app: {{DEPLOYMENT_NAME}}
    managedBy: novamind
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{DEPLOYMENT_NAME}}
  minReplicas: {{MIN_REPLICAS}}
  maxReplicas: {{MAX_REPLICAS}}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {{TARGET_CPU_UTILIZATION}}
{{/ENABLE_AUTOSCALING}}
---
{{#ENABLE_INGRESS}}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{DEPLOYMENT_NAME}}
  namespace: {{NAMESPACE}}
  labels:
    app: {{DEPLOYMENT_NAME}}
    managedBy: novamind
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - {{DOMAIN_NAME}}
    secretName: {{DEPLOYMENT_NAME}}-tls
  rules:
  - host: {{DOMAIN_NAME}}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{DEPLOYMENT_NAME}}
            port:
              number: 80
{{/ENABLE_INGRESS}}
